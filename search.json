[{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2025). OmopSparkConnector: Package (One Line, Title Case). R package version 0.0.0.9000, https://oxford-pharmacoepi.github.io/OmopSparkConnector/.","code":"@Manual{,   title = {OmopSparkConnector: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://oxford-pharmacoepi.github.io/OmopSparkConnector/}, }"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/index.html","id":"omopsparkconnector","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"OmopSparkConnector provides Spark specific implementation OMOP CDM reference defined omopgenerics R package.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version OmopSparkConnector GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"oxford-pharmacoepi/OmopSparkConnector\")"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/index.html","id":"creating-a-cdm-reference-using-sparklyr","dir":"","previous_headings":"","what":"Creating a cdm reference using Sparklyr","title":"What the Package Does (One Line, Title Case)","text":"Let’s first load R libraries. work OmopSparkConnector, first need create connection data using sparklyr. example , schema called “omop” contains OMOP CDM tables another schema can write results course study. also set write prefix tables write start (makes easy clean afterwards avoid name conflicts users). introduction ’ll use mock cdm small synthetic dataset local spark database.","code":"library(dplyr) library(sparklyr) library(OmopSparkConnector) con <- sparklyr::spark_connect(.....) cdm <- cdmFromSpark(con,   cdmSchema = \"omop\",   writeSchema = \"results\",   writePrefix = \"study_1_\" ) cdm <- mockSparkCdm(path = file.path(tempdir(), \"temp_spark\")) #> ! Validation has been turned off, this is not recommended as analytical #>   packages assumed the cdm_reference object fulfills the cdm validation #>   criteria. #> ! Validation has been turned off, this is not recommended as analytical #>   packages assumed the cdm_reference object fulfills the cdm validation #>   criteria."},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/index.html","id":"cross-platform-support","dir":"","previous_headings":"","what":"Cross platform support","title":"What the Package Does (One Line, Title Case)","text":"cdm reference created, now single object R represents OMOP CDM data. object contains references tables can use familiar dplyr code . example, can quickly get count person table. Behind scenes, dbplyr R package translating SQL. can also make use various existing packages work cdm reference using approach. example, can extract summary missing data condition occurrence table using OmopSketch package.","code":"cdm #>  #> ── # OMOP CDM reference (sparklyr) of mock local spark ───────────────────────── #> • omop tables: cdm_source, concept, concept_ancestor, concept_relationship, #> concept_synonym, condition_occurrence, drug_strength, observation_period, #> person, vocabulary #> • cohort tables: - #> • achilles tables: - #> • other tables: - cdm$person |>   dplyr::glimpse() #> Rows: ?? #> Columns: 18 #> Database: spark_connection #> $ person_id                   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 #> $ gender_concept_id           <int> 8507, 8532, 8507, 8507, 8532, 8532, 8507, … #> $ year_of_birth               <int> 1972, 1951, 1979, 1997, 1954, 1985, 1956, … #> $ month_of_birth              <int> 1, 9, 7, 7, 5, 2, 2, 5, 11, 7 #> $ day_of_birth                <int> 3, 28, 7, 31, 11, 10, 16, 16, 12, 1 #> $ race_concept_id             <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ ethnicity_concept_id        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ birth_datetime              <dttm> 1970-01-01 01:00:00, 1970-01-01 01:00:00, … #> $ location_id                 <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ provider_id                 <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ care_site_id                <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ person_source_value         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ gender_source_value         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ gender_source_concept_id    <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ race_source_value           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ race_source_concept_id      <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ ethnicity_source_value      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ ethnicity_source_concept_id <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA  cdm$observation_period |>   dplyr::glimpse() #> Rows: ?? #> Columns: 5 #> Database: spark_connection #> $ observation_period_id         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 #> $ person_id                     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 #> $ observation_period_start_date <date> 1981-02-02, 2018-01-11, 1983-06-07, 2000… #> $ observation_period_end_date   <date> 1991-03-20, 2019-10-03, 1994-03-12, 2011… #> $ period_type_concept_id        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA cdm$person |>    tally() #> # Source:   SQL [?? x 1] #> # Database: spark_connection #>       n #>   <dbl> #> 1    10 cdm$person |>    tally() |>    show_query() #> <SQL> #> SELECT COUNT(*) AS `n` #> FROM person library(OmopSketch) library(flextable) #> Warning: package 'flextable' was built under R version 4.2.2  snap <- summariseOmopSnapshot(cdm) #> Warning: Vocabulary version in cdm_source (NA) doesn't match the one in the vocabulary #> table (mock) tableOmopSnapshot(snap, type = \"tibble\") #> # A tibble: 13 × 3 #>    Variable           Estimate                [header_name]Database name\\n[hea…¹ #>    <chr>              <chr>                   <chr>                              #>  1 General            Snapshot date           2025-06-29                         #>  2 General            Person count            10                                 #>  3 General            Vocabulary version      mock                               #>  4 Observation period N                       10                                 #>  5 Observation period Start date              1960-09-21                         #>  6 Observation period End date                2019-10-03                         #>  7 Cdm                Source name             mock                               #>  8 Cdm                Version                 5.3                                #>  9 Cdm                Holder name             <NA>                               #> 10 Cdm                Release date            <NA>                               #> 11 Cdm                Description             <NA>                               #> 12 Cdm                Documentation reference <NA>                               #> 13 Cdm                Source type             sparklyr                           #> # ℹ abbreviated name: #> #   ¹​`[header_name]Database name\\n[header_level]mock local spark`"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/index.html","id":"native-spark-support","dir":"","previous_headings":"","what":"Native spark support","title":"What the Package Does (One Line, Title Case)","text":"well making use packages provide cross-platform functionality cdm reference OmopSketch, OmopSparkConnector built top sparklyr package can also make use native spark queries. example can compute summary statistics one cdm tables using spark functions. hopefully achieving best worlds. one hand can participate network studies code written way work across database platforms. able go beyond approach, writing bespoke code makes use Spark-specific functionality.","code":"cdm$person |>   sdf_describe(cols = c(     \"gender_concept_id\",     \"year_of_birth\",     \"month_of_birth\",     \"day_of_birth\"   )) #> # Source:   table<`sparklyr_tmp_20b74ffd_d980_4d73_975b_03be43f93d9f`> [?? x 5] #> # Database: spark_connection #>   summary gender_concept_id  year_of_birth     month_of_birth    day_of_birth    #>   <chr>   <chr>              <chr>             <chr>             <chr>           #> 1 count   10                 10                10                10              #> 2 mean    8517.0             1971.8            5.6               13.5            #> 3 stddev  12.909944487358052 17.55499295863651 3.238655413730965 9.766723549322… #> 4 min     8507               1951              1                 1               #> 5 max     8532               1998              11                31"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/index.html","id":"disconnecting-from-your-spark-connection","dir":"","previous_headings":"","what":"Disconnecting from your spark connection","title":"What the Package Does (One Line, Title Case)","text":"can disconnect spark connection like ","code":"cdmDisconnect(cdm)"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/OmopSparkConnector-package.html","id":null,"dir":"Reference","previous_headings":"","what":"OmopSparkConnector: What the Package Does (One Line, Title Case) — OmopSparkConnector-package","title":"OmopSparkConnector: What the Package Does (One Line, Title Case) — OmopSparkConnector-package","text":"package .","code":""},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/OmopSparkConnector-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"OmopSparkConnector: What the Package Does (One Line, Title Case) — OmopSparkConnector-package","text":"Maintainer: First Last first.last@example.com (ORCID)","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/cdmDisconnect.spark_cdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Disconnect the connection of the cdm object — cdmDisconnect.spark_cdm","title":"Disconnect the connection of the cdm object — cdmDisconnect.spark_cdm","text":"Disconnect connection cdm object","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/cdmDisconnect.spark_cdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disconnect the connection of the cdm object — cdmDisconnect.spark_cdm","text":"","code":"# S3 method for class 'spark_cdm' cdmDisconnect(cdm, dropWriteSchema = FALSE, ...)"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/cdmDisconnect.spark_cdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disconnect the connection of the cdm object — cdmDisconnect.spark_cdm","text":"cdm cdm reference dropWriteSchema Whether drop tables writeSchema ... used","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/cdmFromSpark.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cdm_reference object from a sparklyr connection. — cdmFromSpark","title":"Create a cdm_reference object from a sparklyr connection. — cdmFromSpark","text":"Create cdm_reference object sparklyr connection.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/cdmFromSpark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cdm_reference object from a sparklyr connection. — cdmFromSpark","text":"","code":"cdmFromSpark(   con,   cdmSchema,   writeSchema,   cohortTables = NULL,   cdmVersion = NULL,   cdmName = NULL,   achillesSchema = NULL,   .softValidation = FALSE,   writePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/cdmFromSpark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cdm_reference object from a sparklyr connection. — cdmFromSpark","text":"con spark connection created : sparklyr::spark_connect(). cdmSchema Schema omop standard tables located. Schema defined named character list/vector; allowed names : 'catalog', 'schema' 'prefix'. writeSchema Schema writing permissions. Schema defined named character list/vector; allowed names : 'catalog', 'schema' 'prefix'. cohortTables Names cohort tables read writeSchema. cdmVersion version cdm (either \"5.3\" \"5.4\"). NULL cdm_source$cdm_version used instead. cdmName name cdm object, NULL cdm_source$cdm_source_name used instead. achillesSchema Schema achilled tables located. Schema defined named character list/vector; allowed names : 'catalog', 'schema' 'prefix'. .softValidation Whether use soft validation, recommended analysis pipelines assume cdm fullfill validation criteria. writePrefix prefix added tables created write_schema. can used create namespace database write_schema tables.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/cdmFromSpark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cdm_reference object from a sparklyr connection. — cdmFromSpark","text":"cdm reference object","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/cdmFromSpark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a cdm_reference object from a sparklyr connection. — cdmFromSpark","text":"","code":"if (FALSE) { # \\dontrun{ con <- sparklyr::spark_connect(...) cdmFromSpark(   con = con,   cdmSchema = c(catalog = \"...\", schema = \"...\", prefix = \"...\"),   writeSchema = list() # use `list()`/`c()`/`NULL` to use temporary tables ) } # }"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/create_omop_cdm_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Create OMOP CDM tables — create_omop_cdm_tables","title":"Create OMOP CDM tables — create_omop_cdm_tables","text":"Create OMOP CDM tables","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/create_omop_cdm_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create OMOP CDM tables — create_omop_cdm_tables","text":"","code":"create_omop_cdm_tables(   con,   schema_name,   cdm_version = \"5.4\",   overwrite = FALSE,   id_bigint = FALSE )"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/create_omop_cdm_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create OMOP CDM tables — create_omop_cdm_tables","text":"con Connection. Must via odbc (sparklyr connection supported). schema_name Schema create tables cdm_version version OMOP CDM create. Can \"5.3\" \"5.4\" overwrite Whether overwrite existing tables id_bigint Whether use big integers","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/create_omop_cdm_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create OMOP CDM tables — create_omop_cdm_tables","text":"OMOP CDM tables created database","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/dropSourceTable.spark_cdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop spark tables — dropSourceTable.spark_cdm","title":"Drop spark tables — dropSourceTable.spark_cdm","text":"Drop Spark tables write schema connection behind cdm reference.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/dropSourceTable.spark_cdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop spark tables — dropSourceTable.spark_cdm","text":"","code":"# S3 method for class 'spark_cdm' dropSourceTable(cdm, name)"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/dropSourceTable.spark_cdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop spark tables — dropSourceTable.spark_cdm","text":"cdm cdm reference name names tables drop. Tidyselect statements can used.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/dropSourceTable.spark_cdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop spark tables — dropSourceTable.spark_cdm","text":"Drops Spark tables.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/insertTable.spark_cdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a table to a cdm object — insertTable.spark_cdm","title":"Insert a table to a cdm object — insertTable.spark_cdm","text":"Insert local dataframe cdm.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/insertTable.spark_cdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a table to a cdm object — insertTable.spark_cdm","text":"","code":"# S3 method for class 'spark_cdm' insertTable(cdm, name, table, overwrite = TRUE, temporary = FALSE)"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/insertTable.spark_cdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a table to a cdm object — insertTable.spark_cdm","text":"cdm cdm reference. name name table insert. table table insert. overwrite Whether overwrite existing table. temporary TRUE, spark dataframe written (persist end current session). FALSE, spark table written (persist beyond end current session.)","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/insertTable.spark_cdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a table to a cdm object — insertTable.spark_cdm","text":"cdm reference table added.","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/mockSparkCdm.html","id":null,"dir":"Reference","previous_headings":"","what":"creates a cdm reference to local spark OMOP CDM tables — mockSparkCdm","title":"creates a cdm reference to local spark OMOP CDM tables — mockSparkCdm","text":"creates cdm reference local spark OMOP CDM tables","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/mockSparkCdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates a cdm reference to local spark OMOP CDM tables — mockSparkCdm","text":"","code":"mockSparkCdm(path)"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/mockSparkCdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates a cdm reference to local spark OMOP CDM tables — mockSparkCdm","text":"path directory files","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/mockSparkCdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates a cdm reference to local spark OMOP CDM tables — mockSparkCdm","text":"cdm reference synthetic data local spark connection","code":""},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/mockSparkCdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"creates a cdm reference to local spark OMOP CDM tables — mockSparkCdm","text":"","code":"if (FALSE) { # \\dontrun{ mockSparkCdm() } # }"},{"path":"https://oxford-pharmacoepi.github.io/OmopSparkConnector/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr compute omopgenerics cdmDisconnect, cdmTableFromSource, dropSourceTable, insertCdmTo, insertTable, listSourceTables, readSourceTable","code":""}]
